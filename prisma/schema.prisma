generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  otps          OTP[]
  profile       Profile?
}

model OTP {
  id        Int      @id @default(autoincrement())
  code      String
  type      OTPType
  expiresAt DateTime
  verified  Boolean  @default(false)
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model DeliveryOrder {
  id           String    @id @default(uuid())
  projectId    String?
  number       String   @unique
  date         DateTime
  fileUrl      String?
  client       String
  site         String
  orderDate    String
  deliveryDate String
  poReference  String
  status       String
  amount       String
  items        String
  documentId   String?   @unique
  updatedAt    DateTime  @default(now()) @updatedAt
  fileData     Bytes?
  fileName     String?
  fileType     String?
  document     Document? @relation("DeliveryOrderDocument", fields: [documentId], references: [id])
  project      Project?  @relation(fields: [projectId], references: [id])
}

model Project {
  id               String           @id @default(uuid())
  client           String
  site             String
  created          DateTime
  status           String
  endDate          DateTime?
  projectManagerId Int?
  projectName      String?          @db.VarChar(255)
  startDate        DateTime?
  updatedAt        DateTime         @default(now()) @updatedAt
  deliveryOrders   DeliveryOrder[]
  documents        Document[]
  gondolasOne      Gondola[]        @relation("ProjectToGondola")
  projectManager   ProjectManager?  @relation("Project_projectManagerId", fields: [projectManagerId], references: [id])
  projectGondolas  ProjectGondola[]
  manager          String?
}

model Gondola {
  id                  String               @id @default(uuid())
  serialNumber        String
  location            String
  locationDetail      String
  lastInspection      DateTime
  nextInspection      DateTime
  status              String
  photoName           String?
  photoData           Bytes?
  projectId           String?
  updatedAt           DateTime             @default(now()) @updatedAt
  createdAt           DateTime             @default(now())
  certificates        Certificate[]
  documents           Document[]
  project             Project?             @relation("ProjectToGondola", fields: [projectId], references: [id])
  inspections         Inspection[]
  orientationSessions OrientationSession[]
  photos              Photo[]
  projectGondolas     ProjectGondola[]
  repairLogs          RepairLog[]
  shiftHistory        ShiftHistory[]
}

model OrientationSession {
  id               String   @id @default(dbgenerated("gen_random_uuid()"))
  gondolaId        String
  session_type     String
  date             DateTime
  duration         Int?
  instructor       String
  max_participants Int?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  location         String?
  time             String?
  gondola          Gondola  @relation(fields: [gondolaId], references: [id])
}

model RepairLog {
  updatedAt    DateTime @default(now()) @updatedAt
  id           String   @id @default(uuid())
  gondolaId    String?
  date         DateTime
  type         String
  description  String
  partName     String?
  cost         Float
  isChargeable Boolean?
  technician   String
  status       String
  gondola      Gondola? @relation(fields: [gondolaId], references: [id])
}

model Document {
  id            String         @id @default(uuid())
  gondolaId     String?
  type          String
  name          String
  uploaded      DateTime
  expiry        String?
  status        String?
  filePath      String?
  fileData      Bytes?
  projectId     String?
  fileUrl       String?
  category      String?
  title         String?
  notes         String?
  updatedAt     DateTime       @default(now()) @updatedAt
  deliveryOrder DeliveryOrder? @relation("DeliveryOrderDocument")
  gondola       Gondola?       @relation(fields: [gondolaId], references: [id])
  project       Project?       @relation(fields: [projectId], references: [id])
}

model ShiftHistory {
  id                 String   @id @default(uuid())
  gondolaId          String
  fromLocation       String
  fromLocationDetail String
  toLocation         String
  toLocationDetail   String
  shiftDate          DateTime
  reason             String
  notes              String?
  shiftedBy          String
  createdAt          DateTime
  updatedAt          DateTime @default(now()) @updatedAt
  gondola            Gondola  @relation(fields: [gondolaId], references: [id])
}

model Certificate {
  id         String   @id @default(uuid())
  gondolaId  String
  title      String
  status     String
  expiryDate DateTime
  updatedAt  DateTime @default(now()) @updatedAt
  gondola    Gondola  @relation(fields: [gondolaId], references: [id])
}

model Inspection {
  id           String   @id @default(uuid())
  gondolaId    String?
  type         String
  date         DateTime
  inspector    String
  priority     String?
  notes        String?
  notifyClient String?
  createdAt    DateTime @default(now())
  time         String?
  gondola      Gondola? @relation(fields: [gondolaId], references: [id])
}

model ProjectManager {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  email           String?   @unique @db.VarChar(255)
  phone           String?   @db.VarChar(50)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  projectsManaged Project[] @relation("Project_projectManagerId")
}

model Photo {
  id          String   @id @default(uuid())
  gondolaId   String
  fileName    String
  mimeType    String
  uploaded    DateTime @default(now())
  fileData    Bytes
  description String?
  category    String?
  gondola     Gondola  @relation(fields: [gondolaId], references: [id])
}

model ProjectGondola {
  projectId   String
  gondolaId   String
  description String?
  category    String?
  gondola     Gondola @relation(fields: [gondolaId], references: [id])
  project     Project @relation(fields: [projectId], references: [id])

  @@id([projectId, gondolaId])
}

model Profile {
  id                      Int      @id @default(autoincrement())
  userId                  Int      @unique
  firstName               String
  lastName                String
  phone                   String?
  jobTitle                String?
  department              String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  photoUrl                String?
  photoData               Bytes?
  photoName               String?
  photoMimeType           String?
  notificationPreferences Json?
  language                String?
  timezone                String?
  dateFormat              String?
  timeFormat              String?
  currency                String?
  darkMode                Boolean?
  compactMode             Boolean?
  user                    User     @relation(fields: [userId], references: [id])
}

model Notification {
  id         String   @id @default(uuid())
  userId     Int
  type       String
  message    String
  date       DateTime @default(now())
  read       Boolean  @default(false)
  actionLink String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model CertAlertSubscription {
  id         String   @id @default(uuid())
  gondolaId  String
  email      String
  threshold  Int
  frequency  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([gondolaId, email])
}

enum OTPType {
  SIGNUP
  LOGIN
  FORGOT_PASSWORD
  RESET_PASSWORD
}
