generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  otps      OTP[]
  profile   Profile?
  notifications Notification[]
}

model OTP {
  id        Int      @id @default(autoincrement())
  code      String
  type      OTPType
  expiresAt DateTime
  verified  Boolean  @default(false)
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model DeliveryOrder {
  updatedAt    DateTime  @default(now()) @updatedAt
  id           String    @id @default(uuid())
  projectId    String?
  number       String
  date         DateTime
  fileUrl      String?
  client       String
  site         String
  orderDate    DateTime
  deliveryDate DateTime
  poReference  String
  status       String
  amount       String
  items        Int
  project      Project?  @relation(fields: [projectId], references: [id])
  document     Document? @relation("DeliveryOrderDocument", fields: [documentId], references: [id])
  documentId   String?   @unique
}

model Project {
  updatedAt        DateTime         @default(now()) @updatedAt
  id               String           @id @default(uuid())
  client           String
  site             String
  created          DateTime
  status           String
  startDate        DateTime?
  endDate          DateTime?
  projectName      String?          @db.VarChar(255)
  projectManagerId Int?
  deliveryOrders   DeliveryOrder[]
  documents        Document[]
  projectManager   ProjectManager?  @relation("Project_projectManagerId", fields: [projectManagerId], references: [id])
  projectGondolas  ProjectGondola[]
  gondolasOne      Gondola[]        @relation("ProjectToGondola")
}

model Gondola {
  updatedAt       DateTime         @default(now()) @updatedAt
  photos          Photo[]
  id              String           @id @default(uuid())
  serialNumber    String
  location        String
  locationDetail  String
  lastInspection  DateTime
  nextInspection  DateTime
  status          String
  photoName       String?
  photoData       Bytes?
  projectId       String?
  certificates    Certificate[]
  documents       Document[]
  project         Project?         @relation("ProjectToGondola", fields: [projectId], references: [id])
  inspections     Inspection[]
  shiftHistory    ShiftHistory[]
  repairLogs      RepairLog[]
  projectGondolas ProjectGondola[]
}

model RepairLog {
  updatedAt    DateTime @default(now()) @updatedAt
  id           String   @id @default(uuid())
  gondolaId    String?
  date         DateTime
  type         String
  description  String
  partName     String?
  cost         Float
  isChargeable Boolean?
  technician   String
  status       String
  gondola      Gondola? @relation(fields: [gondolaId], references: [id])
}

model Document {
  updatedAt     DateTime       @default(now()) @updatedAt
  id            String         @id @default(uuid())
  gondolaId     String?
  type          String
  name          String
  uploaded      DateTime
  expiry        DateTime?
  status        String?
  filePath      String?
  fileData      Bytes?
  deliveryOrder DeliveryOrder? @relation("DeliveryOrderDocument")
  projectId     String?
  fileUrl       String?
  category      String?
  title         String?
  notes         String?
  gondola       Gondola?       @relation(fields: [gondolaId], references: [id])
  project       Project?       @relation(fields: [projectId], references: [id])
}

model ShiftHistory {
  updatedAt          DateTime @default(now()) @updatedAt
  id                 String   @id @default(uuid())
  gondolaId          String
  fromLocation       String
  fromLocationDetail String
  toLocation         String
  toLocationDetail   String
  shiftDate          DateTime
  reason             String
  notes              String?
  shiftedBy          String
  createdAt          DateTime
  gondola            Gondola  @relation(fields: [gondolaId], references: [id])
}

model Certificate {
  updatedAt  DateTime @default(now()) @updatedAt
  id         String   @id @default(uuid())
  gondolaId  String
  title      String
  status     String
  expiryDate DateTime
  gondola    Gondola? @relation(fields: [gondolaId], references: [id])
}

model Inspection {
  time         String?
  id           String   @id @default(uuid())
  gondolaId    String?
  type         String
  date         DateTime
  inspector    String
  priority     String?
  notes        String?
  notifyClient String?
  createdAt    DateTime @default(now())
  gondola      Gondola? @relation(fields: [gondolaId], references: [id])
}

model ProjectManager {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  email           String?   @unique @db.VarChar(255)
  projectsManaged Project[] @relation("Project_projectManagerId")
  phone           String?   @db.VarChar(50)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
}

model Photo {
  id          String   @id @default(uuid())
  gondolaId   String
  fileName    String
  mimeType    String
  uploaded    DateTime @default(now())
  fileData    Bytes
  description String?
  category    String?
  gondola     Gondola? @relation(fields: [gondolaId], references: [id])
}

model ProjectGondola {
  projectId String
  gondolaId String

  project Project @relation(fields: [projectId], references: [id])
  gondola Gondola @relation(fields: [gondolaId], references: [id])

  description String?
  category    String?

  @@id([projectId, gondolaId])
}

model Profile {
  id                      Int      @id @default(autoincrement())
  userId                  Int      @unique
  user                    User     @relation(fields: [userId], references: [id])
  firstName               String
  lastName                String
  phone                   String?
  jobTitle                String?
  department              String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  photoUrl                String?
  photoData               Bytes?
  photoName               String?
  photoMimeType           String?
  notificationPreferences Json? // New field for notification preferences
  language                String?
  timezone                String?
  dateFormat              String?
  timeFormat              String?
  currency                String?
  darkMode                Boolean?
  compactMode             Boolean?
}

enum OTPType {
  SIGNUP
  LOGIN
  FORGOT_PASSWORD
  RESET_PASSWORD
}


model Notification {
  id         String   @id @default(uuid())
  userId     Int
  type       String
  message    String
  date       DateTime @default(now())
  read       Boolean  @default(false)
  actionLink String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}
